<?php

namespace App\Filament\Resources\ProductResource\Pages;

use App\Filament\Resources\ProductResource;
use App\Models\Store;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;
use Filament\Support\Colors\Color;
use Illuminate\Database\Eloquent\Model;

class EditProduct extends EditRecord
{
    protected static string $resource = ProductResource::class;


//    protected function getRedirectUrl(): ?string
//    {
//        return route('filament.admin.resources.products.edit', $this->record->id);
//    }


    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make()->color(Color::Amber),
        ];
    }


    protected function mutateFormDataBeforeSave(array $data) : array{

        if ($data['url'])
        {
            $parsed_url=parse_url($data['url']);
            $parsed_url['host']=\Str::replace("www.", "" ,  $parsed_url['host']);
            $store=Store::where('host', \Str::lower($parsed_url['host']))->first();

            if (is_amazon( $parsed_url['host'])) {
                if (
                    $this->record->asin ||
                    validate_amazon_product($data, $parsed_url) && amazon_asin_unique($data)
                ){
                    if (!$this->record->asin)
                        $this->record->update([
                            'asin'=>$data['asin']
                        ]);
                    $this->update_product_store($store , []);
                }
                else
                    $this->halt();
            }

            elseif(is_ebay($parsed_url['host']) &&
                validate_ebay_product($data, $parsed_url))
                $this->update_product_store($store , ['ebay_id'=>$data['ebay_id']]);
            else
                $this->halt();

        }

        $this->dispatch('refresh_products_relation');
        return \Arr::except($data , ["url", "ebay_id", "asin"]); // TODO: Change the autogenerated stub
    }

    private function update_product_store($store , $extra_conditions)
    {

        $conditions=array_merge([
            'product_id'=>$this->record->id,
            'store_id'=>$store->id
        ]
        , $extra_conditions);

        $values_to_update=[
            'notify_price'=>$this->data['notify_price'] * 100 ?? 0,
        ];


        \DB::table('product_store')
            ->updateOrInsert($conditions,$values_to_update);
    }
}
